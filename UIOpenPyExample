##etcmain.py
import argparse
import os

import etmtestconverter

parser = argparse.ArgumentParser(prog='etcmain',
                                 description='Generate Gherkin test scenarios from excel files',
                                 usage='etcmain input_dir output_dir')
parser.add_argument('input_dir')
parser.add_argument('output_dir')
args = parser.parse_args()
input_path = args.input_dir
output_path = args.output_dir
# input_path = '/home/viseem/src/specflow/XLSX_to_Specflow_Feature'
# output_path = '/home/viseem/src/specflow/XLSX_to_Specflow_Feature_Output'
with os.scandir(input_path) as input_dir:
    for entry in input_dir:
        if entry.is_file() and entry.name.endswith('.xlsx'):
            file_name = entry.name[:-5]
            for testcase in etmtestconverter.parse_workbook(os.path.join(input_path, entry.name)):
                if testcase is not None:
                    testcase_dir = os.path.join(output_path, file_name)
                    os.makedirs(testcase_dir, exist_ok=True)
                    print(file_name, testcase.name)
                    feature_file = os.path.join(testcase_dir, testcase.name + '.feature')
                    with open(feature_file, "w", encoding='UTF-8') as feature_file:
                        print(testcase.feature(), file=feature_file)
##etcuimain.py
import argparse
import os
import sys

import etmuitestconverter

parser = argparse.ArgumentParser(prog='etcuimain',
                                 description='Generate Gherkin test scenarios from excel files',
                                 usage='etcuimain input_dir output_dir ui_objects_filename')
parser.add_argument('input_dir')
parser.add_argument('output_dir')
parser.add_argument('ui_objects_filename')
args = parser.parse_args()
input_path = args.input_dir
output_path = args.output_dir
ui_objects_filename = args.ui_objects_filename
# input_path = '/home/viseem/src/specflow/XLSX_to_Specflow_Feature'
# output_path = '/home/viseem/src/specflow/XLSX_to_Specflow_Feature_Output'

ui_objects_map = etmuitestconverter.parse_ui_objects(os.path.join(input_path, ui_objects_filename))
if ui_objects_map is not None:
    print(ui_objects_map)
    with os.scandir(input_path) as input_dir:
        for entry in input_dir:
            if entry.is_file() and entry.name.endswith('.xlsx') and entry.name != ui_objects_filename:
                file_name = entry.name[:-5]
                print(entry.name)
                scenarios = etmuitestconverter.parse_scenarios(os.path.join(input_path, entry.name), ui_objects_map)
                print(scenarios)
                if None in scenarios:
                    print('An error happened while parsing {0}'.format(entry.name), file=sys.stderr)
                else:
                    os.makedirs(output_path, exist_ok=True)
                    feature_file = os.path.join(output_path, file_name + '.feature')
                    with open(feature_file, "w", encoding='UTF-8') as feature_file:
                        print(etmuitestconverter.feature(file_name, scenarios, ui_objects_map), file=feature_file)
                        
                        
##etmtestconverter.py
import sys

from excelutils import cell_value_as_string
import openpyxl

"""Constants for elements to parse in the Excel file"""
DO_NOT_INCLUDE = 'DONOTINCLUDE'
TESTCASE_DESCRIPTION = 2
TESTCASE_FIRST_OBJECT_NAME = 9
TESTCASE_NAME = 1


def cell_value(cell, is_input):
    value = cell_value_as_string(cell)
    if value is None:
        return '' if is_input else None
    if value == DO_NOT_INCLUDE:
        return None
    return value


def parse_json_input(filename, request_sheet):
    inputs = []
    opening_row = None
    closing_row = None
    for row_index in range(1, request_sheet.max_row + 1):
        json_element = cell_value_as_string(request_sheet.cell(row_index, 1))
        if json_element is not None:
            json_element = json_element.strip()
            if json_element == '{':
                opening_row = row_index
            if json_element == '}':
                closing_row = row_index
    if opening_row is None or closing_row is None:
        print("Missing opening or closing bracket in json request for file {0}".format(filename), file=sys.stderr)
        return None
    for column_index in range(2, request_sheet.max_column + 1):
        properties = []
        for row_index in range(opening_row + 1, closing_row):
            input_value = cell_value(request_sheet.cell(row_index, column_index), True)
            if input_value is not None:
                properties.append(cell_value_as_string(request_sheet.cell(row_index, 1))
                                  .replace(u'\xa0', '')
                                  .replace(',', '')
                                  .replace('string', input_value)
                                  .strip())
        inputs.append((cell_value_as_string(request_sheet.cell(1, column_index)),
                       '\n'.join(['"""', '{', ',\n'.join(properties), '}', '"""'])))
    return tuple(inputs)


def parse_xml_input(filename, request_sheet):
    inputs = []
    for column_index in range(3, request_sheet.max_column + 1):
        properties = []
        for row_index in range(3, request_sheet.max_row + 1):
            start_tag = cell_value_as_string(request_sheet.cell(row_index, 1))
            end_tag = cell_value_as_string(request_sheet.cell(row_index, 2))
            if end_tag is None or end_tag.strip() == '':
                properties.append(start_tag)
            else:
                input_value = cell_value(request_sheet.cell(row_index, column_index), True)
                if input_value is not None:
                    properties.append(start_tag + input_value + end_tag)
        inputs.append((cell_value_as_string(request_sheet.cell(1, column_index)),
                       '\n'.join(['"""', '\n'.join(properties), '"""'])))
    return tuple(inputs)


INPUT_PARSERS = {'Json': parse_json_input, 'XMLTagNamesStart': parse_xml_input}
INPUT_TYPES = {'Json': 'json', 'XMLTagNamesStart': 'xml'}


def parse_output(filename, validation_sheet):
    outputs = []
    for column_index in range(2, validation_sheet.max_column + 1):
        properties = []
        for row_index in range(2, validation_sheet.max_row + 1):
            expression = cell_value_as_string(validation_sheet.cell(row_index, 1))
            output_value = cell_value(validation_sheet.cell(row_index, column_index), False)
            if expression is not None and expression.strip() != '' and output_value is not None:
                properties.append((expression.strip(), output_value))
        outputs.append((cell_value_as_string(validation_sheet.cell(1, column_index)),
                        properties))
    return tuple(outputs)


def parse_workbook(filename):
    try:
        workbook = openpyxl.load_workbook(filename)
        try:
            test_data_sheet = workbook['TestData']
        except KeyError:
            print("No TestData sheet found in file {0}".format(filename), file=sys.stderr)
            return None
        testcases = (parse_testcase(filename, workbook, row)
                     for row in test_data_sheet.iter_rows(min_row=2)
                     if row[TESTCASE_DESCRIPTION].value == 'XMLWebServiceTest')
        return (testcase for testcase in testcases if testcase is not None)
    except Exception as e:
        print(e, file=sys.stderr)
        return None


def parse_testcase(filename, workbook, row):
    name = "{0}_{1}".format(cell_value_as_string(row[TESTCASE_NAME]), row[TESTCASE_NAME].row - 1)
    parameters = parse_testcase_parameters(row)
    try:
        request_sheet = workbook[parameters['RequestSheet']]
        validation_sheet = workbook[parameters['ValidationSheet']]
    except KeyError:
        print("Missing request or validation sheet found in file {0}".format(filename), file=sys.stderr)
        return None
    request_type = cell_value_as_string(request_sheet.cell(1, 1))
    if request_type not in INPUT_PARSERS.keys():
        print("Unknown request type found in file {0}, request sheet {1}".format(filename, parameters['RequestSheet']),
              file=sys.stderr)
        return None
    inputs = INPUT_PARSERS[request_type](filename, request_sheet)
    outputs = parse_output(filename, validation_sheet)
    if inputs is None or outputs is None:
        return None
    return TestCase(name, inputs, outputs, parameters, INPUT_TYPES[request_type])


def parse_testcase_parameters(row):
    return {cell_value_as_string(row[object_index]): cell_value_as_string(row[object_index + 1])
            for object_index in range(TESTCASE_FIRST_OBJECT_NAME, len(row) - 1, 2)
            if row[object_index].value is not None and row[object_index + 1].value is not None}


class TestCase:
    def __init__(self, name, inputs, outputs, parameters, request_type):
        self.name = name
        self.inputs = inputs
        self.outputs = outputs
        self.parameters = parameters
        self.request_type = request_type

    def feature(self):
        scenarios = ['Feature: {0}'.format(self.name)]
        for sc_input, sc_output in zip(self.inputs, self.outputs):
            scenarios.append(self.scenario(sc_input, sc_output))
        return '\n\n'.join(scenarios)

    def scenario(self, sc_input, sc_output):
        input_name, body = sc_input
        if self.name.startswith('S_'):
            annotation = '@SmokeTest\n'
        elif self.name.startswith('R_'):
            annotation = '@RegressionTest\n'
        else:
            annotation = ''
        lines = ['{0}Scenario: {1}'.format(annotation, input_name),
                 'Given I am a XMLWebservice client',
                 'When I send a POST request to URL "{0}" with the following {1} body'
                 .format(self.parameters['URL'], self.request_type),
                 body,
                 'And Request Header is "{0}"'.format(self.parameters['RequestHeader'])]
        output_name, outputs = sc_output
        for index in range(0, len(outputs)):
            prefix = 'Then' if index == 0 else 'And'
            expression, value = outputs[index]
            if expression.lower().strip().startswith('response code'):
                lines.append('{0} I validate that the Response Code should be {1}'
                             .format(prefix, value))
            else:
                lines.append('{0} I validate that the {1} path expression "{2}" should be "{3}"'
                             .format(prefix, self.request_type, expression, value))
        return '\n'.join(lines)


##etmuitestconverter
import sys
from dataclasses import dataclass

from excelutils import stripped_cell_value
import openpyxl

SC_DATA_FIELD1 = 11
SC_OBJECT_NAME1 = 10
SC_TESTING_ACTION_FUNCTIONALITY = 6

TAF_ACTION = 'Action'
TAF_CLOSE_ALL = 'closeallbrowsers'
TAF_DATA_ENTRY = 'EnterData'
TAF_LAUNCH_AUT = 'LaunchAUT'
TAF_OBJECT_EXIST = 'ObjectExists'
TAF_VALIDATION = 'ValidateData'

TEST_ASSERTIONS = ('ObjectExists', 'ValidateData')

UI_OBJECT_BROWSER_TITLE = 15
UI_OBJECT_BROWSER_URL = 14
UI_OBJECT_CLASS_NAME = 9
UI_OBJECT_DESCRIPTIVE_PROGRAMMING = 11
UI_OBJECT_ID = 6
UI_OBJECT_INNER_TEXT = 8
UI_OBJECT_FRAME = 10
UI_OBJECT_NAME = 7
UI_OBJECT_OBJECT_NAME = 2
UI_OBJECT_PAGE_NAME = 22
UI_OBJECT_RECOVERY_SCENARIO = 13
UI_OBJECT_TAG_NAME = 4
UI_OBJECT_TIME_OUT = 12
UI_OBJECT_TYPE = 3
UI_OBJECT_XPATH = 5


def _parse_ui_object(sheet, row_index):
    """
    Parses one ui object at the given row in the given sheet
    :param sheet: The sheet containing the data
    :param row_index: The row index for the object to parse
    :return: A UIObject containing the data extracted from the row_index row of the sheet
    """

    def cell_value(column):
        return stripped_cell_value(sheet.cell(row_index, column))

    object_name = cell_value(UI_OBJECT_OBJECT_NAME)
    if object_name is None or object_name == '':
        return None
    return UIObject(
        cell_value(UI_OBJECT_BROWSER_TITLE),
        cell_value(UI_OBJECT_BROWSER_URL),
        cell_value(UI_OBJECT_CLASS_NAME),
        cell_value(UI_OBJECT_DESCRIPTIVE_PROGRAMMING),
        cell_value(UI_OBJECT_ID),
        cell_value(UI_OBJECT_INNER_TEXT),
        cell_value(UI_OBJECT_FRAME),
        cell_value(UI_OBJECT_NAME),
        object_name,
        cell_value(UI_OBJECT_PAGE_NAME),
        cell_value(UI_OBJECT_RECOVERY_SCENARIO),
        cell_value(UI_OBJECT_TAG_NAME),
        cell_value(UI_OBJECT_TIME_OUT),
        cell_value(UI_OBJECT_TYPE),
        cell_value(UI_OBJECT_XPATH)
    )


def parse_ui_objects(filename):
    """
    Parses the given Excel file into a map of UIObjects.

    :param filename: The name of the file to parse
    :return: A map of Object names to UIObject
    """
    try:
        workbook = openpyxl.load_workbook(filename)
        try:
            sheet = workbook[workbook.sheetnames[0]]
        except KeyError:
            print("No sheet found in file {0}".format(filename), file=sys.stderr)
            return None
        return {ui_object.object_name: ui_object
                for ui_object in (_parse_ui_object(sheet, row_index)
                                  for row_index in range(2, sheet.max_row + 1))
                if ui_object is not None}
    except Exception as e:
        print(e, file=sys.stderr)
        return None


def _locate_scenarios(sheet):
    """
    Identifies the various scenarios in the given sheet
    :param sheet: The sheet containing the data
    :return: a list of pairs (start, end) of row indexes for each scenario

    The end of a scenario is determined by looking at a transition from a validation action to a
    non validation action
    """
    scenarios = []
    start = 2
    validation_state = False
    for row_index in range(2, sheet.max_row + 1):
        testing_action = stripped_cell_value(sheet.cell(row_index, SC_TESTING_ACTION_FUNCTIONALITY))
        if testing_action in TEST_ASSERTIONS:
            validation_state = True
        else:
            if validation_state:
                scenarios.append((start, row_index))
                start = row_index
            validation_state = False
    if sheet.max_row > start:
        scenarios.append((start, sheet.max_row + 1))
    return scenarios


def _process_boolean_value(val):
    lower = val.lower()
    return lower if lower == 'true' or lower == 'false' else val


def _parse_action(sheet, row_index, ui_objects_map):
    action = stripped_cell_value(sheet.cell(row_index, SC_DATA_FIELD1))
    object_name = stripped_cell_value(sheet.cell(row_index, SC_OBJECT_NAME1))
    if action is None or object_name is None:
        print('Incomplete action on row {0}'.format(row_index), file=sys.stderr)
        return None
    if object_name in ui_objects_map:
        return ActionAction(action, object_name)
    print('Object name {0} not found for action on row {1}'.format(object_name, row_index), file=sys.stderr)
    return None


def _parse_close_all_browser(sheet, row_index, ui_objects_map):
    return CloseAllBrowsersAction()


def _parse_name_value_pairs(sheet, row_index, ui_objects_map):
    inputs = []
    object_not_found = False
    i = SC_OBJECT_NAME1
    while i < sheet.max_column:
        object_name = stripped_cell_value(sheet.cell(row_index, i))
        value = stripped_cell_value(sheet.cell(row_index, i + 1))
        if object_name is not None and value is not None:
            inputs.append((object_name, _process_boolean_value(value)))
            if object_name not in ui_objects_map:
                print('Object name {0} not found on row {1}'.format(object_name, row_index), file=sys.stderr)
                object_not_found = True
            i += 2
        else:
            break
    return () if object_not_found else tuple(inputs)


def _parse_data_entry(sheet, row_index, ui_objects_map):
    inputs = _parse_name_value_pairs(sheet, row_index, ui_objects_map)
    if inputs:
        return [DataEntryAction(object_name, value)
                for object_name, value in inputs]
    else:
        print('No data specified in EnterData action', file=sys.stderr)
        return None


def _parse_launch_aut(sheet, row_index, ui_objects_map):
    url = stripped_cell_value(sheet.cell(row_index, SC_DATA_FIELD1))
    if url is None:
        print('Missing url on LaunchAUT action on row {0}'.format(row_index), file=sys.stderr)
        return None
    else:
        return LaunchAUTAction(url)


def _parse_object_exists(sheet, row_index, ui_objects_map):
    object_name = stripped_cell_value(sheet.cell(row_index, SC_OBJECT_NAME1))
    value = stripped_cell_value(sheet.cell(row_index, SC_DATA_FIELD1))
    if object_name is None or value is None:
        print('Incomplete ObjectExists on row {0}'.format(row_index), file=sys.stderr)
        return None
    if object_name in ui_objects_map:
        return ObjectTestAction(object_name, _process_boolean_value(value))
    print('Object name {0} not found for ObjectExists on row {1}'.format(object_name, row_index), file=sys.stderr)
    return None


def _parse_validation(sheet, row_index, ui_objects_map):
    assertions = _parse_name_value_pairs(sheet, row_index, ui_objects_map)
    if assertions:
        return [ValidationAction(object_name, value)
                for object_name, value in assertions]
    else:
        print('No assertion specified in ValidateData action', file=sys.stderr)
        return None


ACTION_PARSERS = {TAF_ACTION: _parse_action,
                  TAF_CLOSE_ALL: _parse_close_all_browser,
                  TAF_DATA_ENTRY: _parse_data_entry,
                  TAF_LAUNCH_AUT: _parse_launch_aut,
                  TAF_OBJECT_EXIST: _parse_object_exists,
                  TAF_VALIDATION: _parse_validation}


def _parse_scenario(sheet, index, row_range, ui_objects_map):
    actions = []
    start, end = row_range
    for row_index in range(start, end):
        testing_action = stripped_cell_value(sheet.cell(row_index, SC_TESTING_ACTION_FUNCTIONALITY))
        if testing_action is not None and testing_action in ACTION_PARSERS.keys():
            new_actions = ACTION_PARSERS[testing_action](sheet, row_index, ui_objects_map)
            if new_actions is None:
                return None
            if isinstance(new_actions, list):
                actions.extend(new_actions)
            else:
                actions.append(new_actions)
        else:
            print('Testing action {0} on row {1} not recognized'.format(testing_action, row_index), file=sys.stderr)
            return None
    return Scenario('_{0}'.format(index + 1), tuple(actions))


def parse_scenarios(filename, ui_objects_map):
    """
    # Parses the given Excel file into a tuple of Scenarios.
    #
    # :param filename: The name of the file to parse
    # :param ui_objects_map: The map of Object names to UIObject
    # :return: A tuple of Scenarios.
    """
    try:
        workbook = openpyxl.load_workbook(filename)
        try:
            sheet = workbook[workbook.sheetnames[0]]
        except KeyError:
            print("No sheet found in file {0}".format(filename), file=sys.stderr)
            return None
        return tuple((_parse_scenario(sheet, index, row_range, ui_objects_map)
                      for (index, row_range) in enumerate(_locate_scenarios(sheet))))
    except Exception as e:
        print(e, file=sys.stderr)
        return None


def feature(feature_name, scenarios, ui_objects_map):
    """
    Generates the content of a feature file for the given scenarios
    :param feature_name: The feature name
    :param scenarios: The scenarios in the feature
    :param ui_objects_map: The ui objects map
    :return:
    """
    sections = ['Feature: {0}'.format(feature_name)]
    for scenario in scenarios:
        sections.append(scenario.scenario(feature_name, ui_objects_map))
    return '\n\n'.join(sections)


@dataclass(frozen=True)
class UIObject:
    browser_title: str
    browser_url: str
    class_name: str
    descriptive_programming: str
    id: str
    inner_text: str
    frame: str
    name: str
    object_name: str
    page_name: str
    recovery_scenario: str
    tag_name: str
    time_out: str
    type: str
    xpath: str


@dataclass(frozen=True)
class ActionAction:
    action: str
    object_name: str

    def generate(self, ui_objects_map):
        return 'I execute the action "{0}" on object "{1}"'.format(self.action, ui_objects_map[self.object_name].xpath)


@dataclass(frozen=True)
class CloseAllBrowsersAction:
    def generate(self, ui_objects_map):
        return 'I close all browsers'


@dataclass(frozen=True)
class DataEntryAction:
    object_name: str
    value: str

    def generate(self, ui_objects_map):
        return 'I enter "{0}" in object "{1}"'.format(self.value, ui_objects_map[self.object_name].xpath)


@dataclass(frozen=True)
class LaunchAUTAction:
    url: str

    def generate(self, ui_objects_map):
        return 'I launch the application at url "{0}"'.format(self.url)


@dataclass(frozen=True)
class ObjectTestAction:
    object_name: str
    value: str

    def generate(self, ui_objects_map):
        return 'I test that object "{0}" existence is "{1}"'.format(ui_objects_map[self.object_name].xpath, self.value)


@dataclass(frozen=True)
class ValidationAction:
    object_name: str
    value: str

    def generate(self, ui_objects_map):
        return 'I validate that object "{0}" has value "{1}"'.format(ui_objects_map[self.object_name].xpath, self.value)


@dataclass(frozen=True)
class Scenario:
    name: str
    actions: tuple

    def scenario(self, feature_name, ui_objects_map):

        action_lines = [action.generate(ui_objects_map)
                        for action in self.actions]
        last_action = None
        for i in range(len(self.actions)):
            action = self.actions[i]
            if not (isinstance(action, ObjectTestAction) or isinstance(action, ValidationAction)):
                last_action = i
        lines = ['Scenario: {0}{1}'.format(feature_name, self.name),
                 '',
                 'Given {0}'.format(action_lines[0])]
        if 1 < last_action:
            lines.extend(['And {0}'.format(action_line)
                          for action_line in action_lines[1:last_action]])
        lines.append('When {0}'.format(action_lines[last_action]))
        lines.append('Then {0}'.format(action_lines[last_action + 1]))
        if last_action + 2 < len(action_lines):
            lines.extend(['And {0}'.format(action_line)
                          for action_line in action_lines[last_action + 2:]])
        return '\n'.join(lines)
##excelutils.py
def cell_value_as_string(cell):
    """Gets the value of a cell as a string or None if there is no value.

    :param cell The cell to get the value from.
    :type cell: openpyxl.cell.cell.Cell

    :rtype: str or None
    """
    value = cell.value
    if value is None or isinstance(value, str):
        return value
    return str(value)


def stripped_cell_value(cell):
    """Gets the stripped value of a cell as a string or None if there is no value.

    :param cell The cell to get the value from.
    :type cell: openpyxl.cell.cell.Cell

    :rtype: str or None
    """
    if cell.value is None:
        return None
    value = cell.value if isinstance(cell.value, str) else str(cell.value)
    return value.strip()


